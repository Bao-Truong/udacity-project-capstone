version: 2.1

orbs:
  slack: circleci/slack@4.1
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stack_name:
        type: string
      region:
        type: string
        default: us-east-2
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name <<parameters.stack_name>> --region <<parameters.region>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/$kvdb/migration_${CIRCLE_WORKFLOW_ID:0:7})
            export SUCCESS
            echo $SUCCESS -----
            if [ $SUCCESS = "1" ]; 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  install-node-packages-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install front-end
          command: |
            cd frontend
            npm install
      # - persist_to_workspace:
      #     root: ./frontend/node_modules
      #     paths:
      #       - "*"

  install-node-packages-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end install
          command: |
            cd backend
            npm install
      # - persist_to_workspace:
      #     root: ./backend/node_modules
      #     paths:
      #       - "*"
            
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            ls -la
            tar -czvf artifact-frontend.tar.gz dist
      - persist_to_workspace:
          root: ./frontend/dist
          paths:
            - "*"

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            tar -czvf artifact-backend.tar.gz dist
            cp artifact-backend.tar.gz ~/artifact-backend.tar.gz
            ls -la
            cd ..
            echo root------------
            ls -la
      - persist_to_workspace:
          root: ~/
          paths:
            - "artifact-backend.tar.gz"
      

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - attach_workspace:
      #     at: ./frontend/node_modules
      - run:
          name: Test Front-end
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - attach_workspace:
      #     at: ./backend/node_modules
      - run:
          name: Test Backend-end
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan frontend-Critical
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - persist_to_workspace:
          root: ./frontend/node_modules
          paths:
            - "*"

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan backend-Critical
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - persist_to_workspace:
          root: ./backend/node_modules
          paths:
            - "*"
            
  create-ecr-registry:
    docker: 
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:  
          name: Install Dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: Deploy ECR resource
          command: |
            make create-ecr
          
  build-and-upload-docker-images:
    docker:
      - image: 'docker:stable-dind'
    steps:
      - checkout
      - setup_remote_docker
      - run:  
          name: Install Dependencies
          command: |
            apk add --update curl unzip tar wget npm nodejs
            apk add --no-cache aws-cli docker-compose
            which aws
      - run:
          name: Deploy frontend
          command: |
            cd frontend
            npm install
            npm run build
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            
      # - run:
      #     name: unzip artifact
      #     command: |
            
      #       tar -C backend -xf artifact-backend.tar.gz
      #       tar -C frontend -xf artifact-frontend.tar.gz
      #       ls -la ./backend
      #       echo ---
      #       ls -la ./frontend
      - run:
          name: Build docker images (backend and frontend)
          command: |
            cd dockerfiles
            docker-compose build --no-cache
      - run:
          name: Login to ECR
          command: |
            $(aws ecr get-login --no-include-email --region us-east-2)
            # docker login -u AWS -p $(aws ecr get-login-password --region us-east-2) 956722820961.dkr.ecr.us-east-2.amazonaws.com
      - run:
          name: Upload images to ECR
          command: |
            # capstone_backend:latest is defined inside the docker-compose.yml file, make sure 2 places are matched.
            
            docker tag capstone_frontend:latest 956722820961.dkr.ecr.us-east-2.amazonaws.com/capstone-ecr-frontend:latest
            docker tag capstone_backend:latest 956722820961.dkr.ecr.us-east-2.amazonaws.com/capstone-ecr-backend:latest
            docker push 956722820961.dkr.ecr.us-east-2.amazonaws.com/capstone-ecr-frontend:latest
            docker push 956722820961.dkr.ecr.us-east-2.amazonaws.com/capstone-ecr-backend:latest
  
  deploy-infrastructure:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:  
          name: Install Dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: Create networking resources
          command: |
             make create-networking
      - run:
          name: Create EKS resources
          command: |
            make create-eks
  
  deploy-frontend:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt update
            apt install -y awscli tar gzip curl
            curl -LO "https://dl.k8s.io/release/$(curl -LO https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kubectl)/bin/linux/amd64/kubectl"
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install

      - run:
          name: Connect to cluster
          command: make connect-eks
      - run:
          name: Create a Pod
          command: kubectl apply -f deployment/k8s/app_pod.yml
          
      
            
    
workflows:
  default:
    jobs:
      - install-node-packages-frontend
      - install-node-packages-backend
      - scan-frontend:
          requires: [install-node-packages-frontend]
      - scan-backend:
          requires: [install-node-packages-backend]
          
      - test-frontend:
          requires: [install-node-packages-frontend]
      - test-backend:
          requires: [install-node-packages-backend]
          
      - build-frontend:
          requires: [scan-frontend]
      - build-backend:
          requires: [scan-backend]
      
      # - create-ecr-registry
      # - build-and-upload-docker-images
          # requires: [build-frontend,build-backend]
      - deploy-infrastructure
          # requires: [build-and-upload-docker-images]
      - deploy-frontend:
          requires: [deploy-infrastructure]
      
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
     
